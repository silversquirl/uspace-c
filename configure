#!/bin/sh
## BEGIN USER CONFIG ##
conf() {
	SRC=*.c\ lib/*.c
	BUILDDIR=build

	TARGETS=
	for f in *.c; do
		TARGETS="$TARGETS $BUILDDIR/bin/${f%.c}"
	done

	CC="$(detect musl-clang musl-gcc clang gcc cc)" || error 'Could not find C compiler'
	CFLAGS='-std=c99 -Wall -pedantic -D_XOPEN_SOURCE=700'
	LDFLAGS=

	if [ -z "${CC##musl-*}" ]; then
		CFLAGS="$CFLAGS -Wno-unused-command-line-argument"
		LDFLAGS="$LDFLAGS -Wno-unused-command-line-argument"
	fi

	if [ -z "${CC##musl-*}" ] || ! libc_is_gnu; then
		LDFLAGS="$LDFLAGS -static"
	fi
}

develconf() {
	CFLAGS="$CFLAGS -g"
}

releaseconf() {
	CFLAGS="$CFLAGS -DRELEASE -O3"
}
## END USER CONFIG ##

error() {
	echo ERROR: "$@" >&2
	exit 1
}

detect() {
	# Pick the first argument that can be found in PATH
	for arg; do
		if command -v "$arg" >/dev/null 2>&1; then
			echo "$arg"
			return
		fi
	done
	false
}

libc_is_gnu() {
	# Check if the compiler's libc is glibc
	echo '#include <gnu/libc-version.h>' |
	"$CC" $CFLAGS -E - >/dev/null 2>&1
}

deps() {
	# Find the dependencies of a C file
	"$CC" $CFLAGS -E "$1" |
	grep '^[ \t]*#[ \t]*\(line\|[ \t]\)[0-9]\+[ \t]\+"[^<>"]\+"' |
	sed 's/^[^"]*"\([^<>"]\+\)".*$/\1/' |
	sort -ur |
	while read -r file; do
		[ "$file" != "$1" ] && printf ' %s' "$file"
	done || exit
	echo
}

conf

for arg; do
	case "$arg" in
		--release|-r) mode=r;;
		--debug|--devel|-g) mode=d;;
		-*) error "Unknown option '$arg'";;
		*) error "Unexpected argument '$arg'";;
	esac
done

case "$mode" in
	d*|'') develconf;;
	r*) releaseconf;;
esac

wspc='[
	 ]'

BUILDDIR="${BUILDDIR:-.}"

set -- $SRC
SRC=
OBJ=
check_deps=

for f; do
	[ -z "${f##*$wspc*}" ] && error "Source filename '$f' contains whitespace"

	SRC="$SRC $f"
	if [ -z "${f##*.c}" ]; then
		check_deps="$check_deps $f"
		objf="$BUILDDIR/obj/${f%.c}.o"
		OBJ="$OBJ $BUILDDIR/obj/${f%.c}.o"
	fi
done

{
	echo '.POSIX:'
	echo "SRC = $SRC"
	echo "OBJ = $OBJ"
	echo "TARGETS = $TARGETS"
	echo "BUILDDIR = $BUILDDIR"
	echo "CC = $CC"
	echo "CFLAGS = $CFLAGS"
	echo "LDFLAGS = $LDFLAGS"
	echo
	echo '.PHONY: all'
	echo 'all: ${TARGETS}'

	set -f; set -- $check_deps; set +f
	[ "$#" -gt 0 ] && echo
	for f; do
		deps_list="$(deps "$f")" || exit
		echo "$BUILDDIR/obj/${f%.c}.o:$deps_list"
	done
} >config.mk

if ! [ -e Makefile ]; then
	printf 'Makefile not found; create one? [Y/n] '
	read -r ans
	case "$ans" in
		y*|Y*|'')
			cat >Makefile <<'EOF'
.POSIX:
include config.mk

.PHONY: clean
clean:
	rm -rf ${BUILDDIR}

${BUILDDIR}/bin/%: ${BUILDDIR}/obj/%.o
	@mkdir -p $$(dirname $@)
	${CC} -o $@ $^ ${LDFLAGS}

${BUILDDIR}/obj/%.o: %.c config.mk
	@mkdir -p $$(dirname $@)
	${CC} ${CFLAGS} -c -o $@ $<
EOF
			;;
		*) ;;
	esac
fi

true
